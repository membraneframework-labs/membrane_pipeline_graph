# pipeline graph

```elixir
Mix.install([:kino])
```

## Section

```elixir
defmodule PipelineGraph do
  use Kino.JS
  use Kino.JS.Live

  def new(graph \\ []) do
    Kino.JS.Live.new(__MODULE__, graph)
  end

  @impl true
  def init(graph, ctx) do
    {:ok, assign(ctx, graph: graph)}
  end

  @impl true
  def handle_connect(ctx) do
    Membrane.Core.Graph.subscribe()
    {:ok, ctx.assigns.graph, ctx}
  end

  @impl true
  def handle_info({:graph, graph}, ctx) do
    graph = Enum.map(graph, &serialize_graph_entry/1)
    broadcast_event(ctx, "add_graph", graph)
    {:noreply, ctx}
  end

  defp serialize_graph_entry(%{entity: :component, type: type, path: path}) do
    {parent, [label]} = Enum.split(path, -1)

    %{
      group: :nodes,
      data: %{
        type => true,
        id: serialize_path(path),
        label: serialize_label(label),
        parent: serialize_path(parent)
      }
    }
  end

  defp serialize_graph_entry(%{entity: :link, from: from, to: to}) do
    from = serialize_path(from)
    to = serialize_path(to)

    %{
      group: :edges,
      data: %{id: "#{from}<>#{to}", source: from, target: to}
    }
  end

  defp serialize_path(path) do
    path |> Enum.drop(1) |> Enum.join("/") |> serialize_name()
  end

  defp serialize_label(label) do
    if String.length(label) > 30 do
      String.slice(label, 0..24) <> "..." <> String.slice(label, -3..-1)
    else
      label
    end
    |> serialize_name()
  end

  defp serialize_name(name) do
    String.replace(name, ~w(" @ \ < >), "")
  end

  asset "app.js" do
    File.read!("/Users/matheksm/Desktop/sm/membrane_test/graphs_proj/out.js")
  end

  asset "main.js" do
    """
    import "./app.js";

    export function init(ctx, graph) {
      ctx.root.innerHTML = `
      <div id="graphContainer" style="max-width:890px;height:600px;border:1px solid black;border-radius:15px"></div>
      `
      const mg = new MembraneGraph(document.querySelector("#graphContainer"));
      mg.addData(graph)
      ctx.handleEvent("add_graph", (graph) => {
        mg.addData(graph)
      });
    }
    """
  end
end

pg = PipelineGraph.new()
```
